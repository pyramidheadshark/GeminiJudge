# geminijudge/app.py
import streamlit as st
from dotenv import load_dotenv
import os
import traceback # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
import prompts
import gemini_utils

# --- –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
load_dotenv()

def initialize_session_state():
    defaults = {
        "api_key_input": os.getenv("GOOGLE_API_KEY", ""),
        "gemini_configured": False,
        "uploaded_st_files": [], # –°–ø–∏—Å–æ–∫ UploadedFile –æ–±—ä–µ–∫—Ç–æ–≤ –æ—Ç Streamlit
        "processed_gemini_files": [], # –°–ø–∏—Å–æ–∫ genai.File –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Gemini
        "user_prompt_input": "",
        "model_a_response_input": "",
        "num_incorrect_samples_input": 3,
        "generated_incorrect_responses": [],
        "evaluation_result_id": None,
        "all_responses_for_evaluation": {},
        "log_messages": [],
        "app_run_id": 0, # –î–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        "processing_complete": False # –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    }
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value
    
    if st.session_state.api_key_input and not st.session_state.gemini_configured:
        gemini_utils.configure_gemini_api()

initialize_session_state()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –õ–æ–≥–∏–∫–∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–µ UI) ---

def handle_file_uploads_and_processing(uploaded_st_files_list: list) -> bool:
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏–º —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–æ)
    st.session_state.processed_gemini_files = []

    if not uploaded_st_files_list:
        gemini_utils.log_info("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.")
        return True # –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ - –Ω–µ –æ—à–∏–±–∫–∞, –Ω–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.

    all_successful = True
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º with st.spinner –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ UI –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    for i, st_file in enumerate(uploaded_st_files_list):
        gemini_utils.log_info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {i+1}/{len(uploaded_st_files_list)}: {st_file.name}")
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –≥–ª–∞–≤–Ω–æ–º UI —á–µ—Ä–µ–∑ st.status –±—É–¥–µ—Ç –ª—É—á—à–µ
        gemini_file_obj = gemini_utils.upload_file_to_gemini(st_file, display_name_prefix=f"doc{i+1}")
        
        if gemini_file_obj and hasattr(gemini_file_obj, 'state') and gemini_file_obj.state.name == "ACTIVE":
            st.session_state.processed_gemini_files.append(gemini_file_obj)
        elif gemini_file_obj: # –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ ACTIVE
            gemini_utils.log_warning(f"–§–∞–π–ª {st_file.name} –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {gemini_file_obj.state.name}). –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
            # –†–µ—à–∞–µ–º, –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ processed_gemini_files.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å, –µ—Å–ª–∏ –Ω–µ ACTIVE.
            # st.session_state.processed_gemini_files.append(gemini_file_obj) # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å
            all_successful = False 
        else: # gemini_file_obj is None
            gemini_utils.log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª {st_file.name}.")
            all_successful = False
            
    if all_successful and st.session_state.processed_gemini_files:
        gemini_utils.log_success(f"{len(st.session_state.processed_gemini_files)} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.")
    elif st.session_state.processed_gemini_files:
         gemini_utils.log_warning(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(st.session_state.processed_gemini_files)} –∏–∑ {len(uploaded_st_files_list)} —Ñ–∞–π–ª–æ–≤. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    elif uploaded_st_files_list: # –ë—ã–ª–∏ —Ñ–∞–π–ª—ã, –Ω–æ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª—Å—è
        gemini_utils.log_error("–ù–∏ –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        all_successful = False
        
    return all_successful

def generate_and_parse_incorrect_responses_logic(user_prompt: str, model_a_response: str, num_samples: int) -> bool:
    st.session_state.generated_incorrect_responses = []
    prompt_for_incorrect = prompts.get_generate_incorrect_answers_prompt(user_prompt, model_a_response, num_samples)
    
    raw_response = gemini_utils.generate_text_from_model(
        prompt_for_incorrect, files_for_context=st.session_state.processed_gemini_files
    )

    if not raw_response:
        gemini_utils.log_error("–ù–µ –ø–æ–ª—É—á–µ–Ω—ã '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ' –æ—Ç–≤–µ—Ç—ã –æ—Ç Gemini.")
        return False

    parsed_responses = []
    current_answer_accumulator = []
    for line in raw_response.splitlines():
        if line.startswith(prompts.INCORRECT_ANSWER_PARSING_PREFIX):
            if current_answer_accumulator:
                parsed_responses.append("\n".join(current_answer_accumulator).strip())
            current_answer_accumulator = [line.replace(prompts.INCORRECT_ANSWER_PARSING_PREFIX, "", 1).strip()]
        elif current_answer_accumulator:
            current_answer_accumulator.append(line.strip())
    if current_answer_accumulator:
        parsed_responses.append("\n".join(current_answer_accumulator).strip())

    st.session_state.generated_incorrect_responses = [resp for resp in parsed_responses if resp]

    if not st.session_state.generated_incorrect_responses:
        gemini_utils.log_warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ' –æ—Ç–≤–µ—Ç—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç).")
        # st.sidebar.expander("–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç Gemini (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–æ—Ö–∏—Ö)", expanded=False).text_area("",raw_response, height=100, key=f"raw_bad_gen_fail_{st.session_state.app_run_id}")
        return False
    
    gemini_utils.log_success(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(st.session_state.generated_incorrect_responses)} '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö' –æ—Ç–≤–µ—Ç–æ–≤.")
    if len(st.session_state.generated_incorrect_responses) != num_samples:
        gemini_utils.log_warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {num_samples}, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ/—Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(st.session_state.generated_incorrect_responses)}.")
    return True

def evaluate_all_responses_logic(user_prompt: str, model_a_response: str) -> bool:
    st.session_state.evaluation_result_id = None
    st.session_state.all_responses_for_evaluation = {}

    all_responses_dict = {prompts.MODEL_A_ANSWER_ID: model_a_response}
    for i, resp_text in enumerate(st.session_state.generated_incorrect_responses):
        all_responses_dict[prompts.get_incorrect_answer_id(i)] = resp_text
    st.session_state.all_responses_for_evaluation = all_responses_dict

    text_block_for_prompt = ""
    for identifier, text in all_responses_dict.items():
        text_block_for_prompt += f"{identifier}:\n{text}\n---\n"
    
    prompt_for_evaluation = prompts.get_evaluate_responses_prompt(user_prompt, text_block_for_prompt)
    
    chosen_id_raw = gemini_utils.generate_text_from_model(
        prompt_for_evaluation, files_for_context=st.session_state.processed_gemini_files
    )

    if not chosen_id_raw:
        gemini_utils.log_error("–ù–µ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –æ—Ç Gemini.")
        return False
    
    chosen_id = chosen_id_raw.strip().split()[0] if chosen_id_raw.strip() else "" # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ

    if chosen_id in all_responses_dict:
        st.session_state.evaluation_result_id = chosen_id
        gemini_utils.log_success(f"Gemini –≤—ã–±—Ä–∞–ª ID: '{chosen_id}'")
    else:
        gemini_utils.log_warning(f"Gemini –≤–µ—Ä–Ω—É–ª '{chosen_id_raw.strip()}', ID –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–≤–µ—Ç Gemini.")
        # st.sidebar.expander("–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç Gemini (–æ—Ü–µ–Ω–∫–∞)", expanded=False).text_area("", chosen_id_raw, height=100, key=f"raw_eval_fail_{st.session_state.app_run_id}")
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ ID
        found_by_text = False
        for id_key, text_val in all_responses_dict.items():
            if chosen_id_raw.strip() == text_val.strip():
                st.session_state.evaluation_result_id = id_key
                gemini_utils.log_warning(f"ID '{id_key}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞.")
                found_by_text = True
                break
        if not found_by_text:
            return False # –û—Ü–µ–Ω–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            
    return True

# --- UI: –ë–æ–∫–æ–≤–∞—è –ü–∞–Ω–µ–ª—å (–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –í–≤–æ–¥) ---
with st.sidebar:
    st.header("‚öñÔ∏è GeminiJudge")
    st.caption("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –í—Ö–æ–¥–Ω—ã–µ –î–∞–Ω–Ω—ã–µ")

    with st.expander("üîë API –ö–ª—é—á Google AI", expanded=not st.session_state.gemini_configured):
        api_key_val = st.text_input(
            "–í–∞—à API –∫–ª—é—á:",
            type="password",
            value=st.session_state.api_key_input,
            key=f"api_key_field_{st.session_state.app_run_id}",
            help="–ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ GOOGLE_API_KEY –≤ .env"
        )
        if api_key_val != st.session_state.api_key_input:
            st.session_state.api_key_input = api_key_val
            st.session_state.gemini_configured = False # –°–±—Ä–æ—Å –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–ª—é—á–∞
            gemini_utils.configure_gemini_api() # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–∞–∑—É
            st.rerun()

        if st.session_state.gemini_configured:
            st.success("API –≥–æ—Ç–æ–≤.")
        elif st.session_state.api_key_input: # –ö–ª—é—á –≤–≤–µ–¥–µ–Ω, –Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
             st.error("API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á.")
        # else: # –ö–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω
            # st.info("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á.")

    st.session_state.uploaded_st_files = st.file_uploader(
        "1. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (PDF, TXT, DOCX –∏ –¥—Ä.):",
        accept_multiple_files=True,
        key=f"file_uploader_{st.session_state.app_run_id}"
    )
    if st.session_state.uploaded_st_files:
        st.caption(f"–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(st.session_state.uploaded_st_files)}")
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        # for f in st.session_state.uploaded_st_files: st.caption(f"- {f.name[:30]}")
    
    st.session_state.user_prompt_input = st.text_area(
        "2. –í–∞—à –ü—Ä–æ–º–ø—Ç:",
        value=st.session_state.user_prompt_input,
        height=100,
        key=f"user_prompt_area_{st.session_state.app_run_id}"
    )
    st.session_state.model_a_response_input = st.text_area(
        "3. –û—Ç–≤–µ—Ç '–ú–æ–¥–µ–ª–∏ –ê' (—ç—Ç–∞–ª–æ–Ω–Ω—ã–π):",
        value=st.session_state.model_a_response_input,
        height=100,
        key=f"model_a_response_area_{st.session_state.app_run_id}"
    )
    st.session_state.num_incorrect_samples_input = st.number_input(
        "4. –ö–æ–ª-–≤–æ '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö' –ø—Ä–∏–º–µ—Ä–æ–≤:",
        min_value=1, max_value=5,
        value=st.session_state.num_incorrect_samples_input, step=1,
        key=f"num_incorrect_{st.session_state.app_run_id}"
    )

    run_button_disabled = not st.session_state.gemini_configured or \
                          not st.session_state.user_prompt_input.strip() or \
                          not st.session_state.model_a_response_input.strip()
                          # –§–∞–π–ª—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ö—É–∂–µ

    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –û—Ü–µ–Ω–∫—É", type="primary", use_container_width=True, disabled=run_button_disabled, key=f"run_button_{st.session_state.app_run_id}"):
        st.session_state.app_run_id += 1
        st.session_state.log_messages = [] # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        st.session_state.processing_complete = False # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞
        gemini_utils.log_info("=== –ù–æ–≤—ã–π —Å–µ–∞–Ω—Å GeminiJudge ===")

        overall_success = True
        
        # –≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è st.status
        # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å

    st.divider()
    st.subheader("–ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π")
    if st.session_state.log_messages:
        for level, message in reversed(st.session_state.log_messages):
            if level == "info": st.sidebar.info(message)
            elif level == "success": st.sidebar.success(message)
            elif level == "warning": st.sidebar.warning(message)
            elif level == "error": st.sidebar.error(message)
        if st.sidebar.button("–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª", key=f"clear_log_{st.session_state.app_run_id}", use_container_width=True):
            st.session_state.log_messages = []
            st.rerun()
    else:
        st.sidebar.caption("–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.")


# --- UI: –û—Å–Ω–æ–≤–Ω–∞—è –û–±–ª–∞—Å—Ç—å (–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –°—Ç–∞—Ç—É—Å) ---
st.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –û—Ü–µ–Ω–∫–∏ GeminiJudge")

# –õ–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é app_run_id –∏–ª–∏ –¥—Ä—É–≥–æ–º—É —Ñ–ª–∞–≥—É
# –≠—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ü–û–°–õ–ï —Ç–æ–≥–æ, –∫–∞–∫ UI —Å–∞–π–¥–±–∞—Ä–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è –∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞

# –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã st.status, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –æ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
# –ü–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞, –º—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É –∑–¥–µ—Å—å.
# –ò—Å–ø–æ–ª—å–∑—É–µ–º "processing_initiate" –∫–∞–∫ —Ñ–ª–∞–≥, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º rerun
if "processing_initiate" not in st.session_state:
    st.session_state.processing_initiate = False

if st.session_state.get(f"run_button_{st.session_state.app_run_id-1}"): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ—Ä–∞–Ω–∞
    st.session_state.processing_initiate = True
    # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –±–µ–∑ –Ω–æ–≤–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    # –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è —á–∞—Å—Ç—å Streamlit - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏
    # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    
if st.session_state.processing_initiate:
    overall_success = True
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º –∏–∑ —ç—Ç–æ–π —Ç–æ—á–∫–∏
    st.session_state.generated_incorrect_responses = []
    st.session_state.evaluation_result_id = None
    st.session_state.all_responses_for_evaluation = {}

    with st.status("–≠—Ç–∞–ø 0: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤...", expanded=True) as status_files:
        if not handle_file_uploads_and_processing(st.session_state.uploaded_st_files):
            st.error("–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π —Ñ–∞–π–ª–æ–≤.")
            status_files.update(label="–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤!", state="error", expanded=True)
            overall_success = False
        elif not st.session_state.processed_gemini_files and st.session_state.uploaded_st_files:
             st.warning("–§–∞–π–ª—ã –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –Ω–æ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
             status_files.update(label="–§–∞–π–ª—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã!", state="warning", expanded=True)
             # overall_success –º–æ–∂–Ω–æ –Ω–µ –º–µ–Ω—è—Ç—å, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
        else:
            status_files.update(label="–§–∞–π–ª—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã/–ø—Ä–æ–ø—É—â–µ–Ω—ã.", state="complete", expanded=False)

    if overall_success:
        with st.status(f"–≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {st.session_state.num_incorrect_samples_input} '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö' –æ—Ç–≤–µ—Ç–æ–≤...", expanded=True) as status_gen:
            if not generate_and_parse_incorrect_responses_logic(st.session_state.user_prompt_input, st.session_state.model_a_response_input, st.session_state.num_incorrect_samples_input):
                st.warning("–ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö' –æ—Ç–≤–µ—Ç–æ–≤.")
                status_gen.update(label="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö'!", state="warning", expanded=True)
                # –ù–µ —Å—Ç–∞–≤–∏–º overall_success = False, –æ—Ü–µ–Ω–∫–∞ Model A –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞
            else:
                status_gen.update(label="'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ' –æ—Ç–≤–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!", state="complete", expanded=False)
    
    if overall_success: 
        with st.status("–≠—Ç–∞–ø 2: –û—Ü–µ–Ω–∫–∞ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤...", expanded=True) as status_eval:
            if not evaluate_all_responses_logic(st.session_state.user_prompt_input, st.session_state.model_a_response_input):
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –æ—Ç Gemini.")
                status_eval.update(label="–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏!", state="error", expanded=True)
                overall_success = False
            else:
                status_eval.update(label="–û—Ç–≤–µ—Ç—ã –æ—Ü–µ–Ω–µ–Ω—ã!", state="complete", expanded=False)
    
    if overall_success:
        gemini_utils.log_success("=== –°–µ–∞–Ω—Å GeminiJudge –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! ===")
        st.balloons()
    else:
        gemini_utils.log_error("=== –°–µ–∞–Ω—Å GeminiJudge –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏/–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏. ===")
    
    st.session_state.processing_complete = True
    st.session_state.processing_initiate = False # –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥
    st.rerun() # –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å UI –∏ –ª–æ–≥–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
if st.session_state.processing_complete:
    if not st.session_state.generated_incorrect_responses and not st.session_state.evaluation_result_id:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∫—É.")
    
    if st.session_state.generated_incorrect_responses:
        st.subheader("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ' –û—Ç–≤–µ—Ç—ã:")
        cols_incorrect = st.columns(len(st.session_state.generated_incorrect_responses))
        for i, resp_text in enumerate(st.session_state.generated_incorrect_responses):
            with cols_incorrect[i % len(cols_incorrect)]: # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
                exp_title = f"–ü–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç #{i + 1}"
                is_chosen = st.session_state.evaluation_result_id == prompts.get_incorrect_answer_id(i)
                if is_chosen: exp_title = f"‚úîÔ∏è {exp_title} (–í—ã–±—Ä–∞–Ω)"
                
                with st.container(border=True):
                    st.markdown(f"**{exp_title}**")
                    st.caption(resp_text[:150] + "..." if len(resp_text) > 150 else resp_text) # –ö—Ä–∞—Ç–∫–∏–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                    # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å expander –∏–ª–∏ modal
                    # st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é").markdown(resp_text)


    if st.session_state.all_responses_for_evaluation:
        st.divider()
        st.subheader("–ò—Ç–æ–≥–æ–≤—ã–π –í—ã–±–æ—Ä Gemini:")
        if st.session_state.evaluation_result_id:
            chosen_text = st.session_state.all_responses_for_evaluation.get(st.session_state.evaluation_result_id)
            
            result_prefix = "ü§î"
            chosen_id_display = st.session_state.evaluation_result_id
            
            if st.session_state.evaluation_result_id == prompts.MODEL_A_ANSWER_ID:
                st.success(f"üèÜ Gemini –≤—ã–±—Ä–∞–ª: **{chosen_id_display}** (–û—Ç–≤–µ—Ç '–ú–æ–¥–µ–ª–∏ –ê')")
            elif st.session_state.evaluation_result_id and st.session_state.evaluation_result_id.startswith("–ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô_–û–¢–í–ï–¢_"):
                st.warning(f"‚ö†Ô∏è Gemini –≤—ã–±—Ä–∞–ª: **{chosen_id_display}** (–û–¥–∏–Ω –∏–∑ '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö' –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!)")
            else: 
                st.info(f"{result_prefix} Gemini –≤—ã–±—Ä–∞–ª: **{chosen_id_display}**")

            if chosen_text:
                with st.container(border=True):
                    st.markdown("**–¢–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:**")
                    st.markdown(chosen_text)
            else:
                st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è ID: {st.session_state.evaluation_result_id}")
        elif st.session_state.all_responses_for_evaluation : # –ï—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–≤–µ—Ç—ã, –Ω–æ –æ—Ü–µ–Ω–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            st.warning("Gemini –Ω–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ.")
else:
    if not any(st.session_state.log_messages): # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–æ–≥–æ–≤ –µ—â–µ –Ω–µ—Ç
         st.info("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∫—É.")