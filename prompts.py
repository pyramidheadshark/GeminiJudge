MODEL_A_ANSWER_ID = "ОТВЕТ_МОДЕЛИ_A"
INCORRECT_ANSWER_PARSING_PREFIX = "НЕПРАВИЛЬНЫЙ_ОТВЕТ:"

def get_incorrect_answer_id(index: int) -> str:
    """Генерирует стандартизированный ID для неправильного ответа."""
    return f"НЕПРАВИЛЬНЫЙ_ОТВЕТ_{index + 1}"

def get_generate_incorrect_answers_prompt(user_prompt: str, model_a_response: str, num_incorrect_samples: int) -> str:
    """
    Генерирует промпт для создания заведомо неправильных ответов.
    """
    return f"""
Тебе предоставлены:
1. Контекстные документы (прикреплены к этому запросу).
2. Оригинальный промпт пользователя.
3. Ответ "Модели А" на этот промпт (будем считать его условно правильным или эталонным для сравнения).

Твоя задача: Внимательно изучи документы и промпт. Затем сгенерируй ровно {num_incorrect_samples} (штук) заведомо НЕПРАВИЛЬНЫХ, но внешне правдоподобных и релевантных промпту ответов.
Эти неправильные ответы должны:
- Однозначно противоречить информации из прикрепленных документов или содержать существенные фактические ошибки, основанные на этих документах.
- Быть логически связанными с оригинальным промптом пользователя.
- Значительно отличаться от ответа "Модели А" и друг от друга.
- НЕ быть простым отрицанием ответа "Модели А" или тривиально неверными. Они должны выглядеть так, как будто модель пыталась ответить правильно, но ошиблась в фактах или интерпретации.
- Быть на русском языке.

Оригинальный промпт пользователя:
---
{user_prompt}
---
Ответ "Модели А":
---
{model_a_response}
---

Сгенерируй {num_incorrect_samples} НЕПРАВИЛЬНЫХ ответов. Каждый ответ должен начинаться с новой строки и префикса "{INCORRECT_ANSWER_PARSING_PREFIX}", например:
{INCORRECT_ANSWER_PARSING_PREFIX} [Текст первого неправильного ответа]
{INCORRECT_ANSWER_PARSING_PREFIX} [Текст второго неправильного ответа]
... и так далее для всех {num_incorrect_samples} ответов.

Не добавляй никаких других пояснений, вступлений или завершающих фраз. Только ответы с указанным префиксом.
Убедись, что каждый сгенерированный ответ действительно неверен в контексте предоставленных документов.
"""

def get_evaluate_responses_prompt(user_prompt: str, all_responses_text_block: str) -> str:
    """
    Генерирует промпт для оценки и выбора наилучшего ответа.
    all_responses_text_block - это строка, содержащая все ответы с их идентификаторами.
    """
    return f"""
Ты являешься экспертом по факт-чекингу и оценке ответов на основе предоставленных документов и оригинального промпта.
Тебе даны:
1. Контекстные документы (прикреплены к этому запросу).
2. Оригинальный промпт пользователя.
3. Несколько вариантов ответов. Каждый ответ имеет уникальный идентификатор перед текстом.

Твоя задача: Внимательно проанализируй ВСЕ предоставленные варианты ответов ИСКЛЮЧИТЕЛЬНО на основе информации, содержащейся в прикрепленных документах и в соответствии с оригинальным промптом.
Выбери ОДИН ответ, который является наиболее точным, полным и релевантным промпту, основываясь СТРОГО на данных из документов.

Оригинальный промпт пользователя:
---
{user_prompt}
---
Варианты ответов для оценки:
---
{all_responses_text_block}
---

Критерии оценки:
1.  **Точность:** Соответствие фактам из документов. Отсутствие вымысла или информации, не подтвержденной документами.
2.  **Полнота:** Охват всех ключевых аспектов промпта, которые могут быть освещены на основе документов.
3.  **Релевантность:** Прямой ответ на поставленный промпт, без ухода от темы.

Твой ответ должен содержать ТОЛЬКО ИДЕНТИФИКАТОР выбранного тобой наилучшего ответа (например, "{MODEL_A_ANSWER_ID}" или "{get_incorrect_answer_id(0)}").
Не добавляй никаких других пояснений, комментариев или своего мнения. Только идентификатор.
Если "ОТВЕТ_МОДЕЛИ_A" полностью соответствует критериям и является лучшим, выбери его.
Если среди "НЕПРАВИЛЬНЫЙ_ОТВЕТ_X" есть более точный и полный ответ, чем "ОТВЕТ_МОДЕЛИ_A" (в контексте документов!), выбери его.
Если все ответы содержат ошибки или неполны, выбери тот, который содержит наименьшее количество искажений или наиболее полно отвечает на запрос, даже если он не идеален.
"""